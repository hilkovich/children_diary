import os
from dotenv import load_dotenv
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from utils.states import ProcessImageStates
from queries.history import add_new_history
from keyboards.history import (
    kb_create_history,
    kb_save_repeat_history,
    kb_repeat_history,
)
from queries.prediction import (
    prediction_captions,
    prediction_history,
    instructions_history,
)

load_dotenv()

username = os.getenv("RABBIT_USER")
password = os.getenv("RABBIT_PASSWORD")
host = os.getenv("RABBIT_HOST")

router = Router()


@router.callback_query(F.data == "new_history")
async def cmn_new_history(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚û§ –°–ø–µ—Ä–≤–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 5 –¥–µ—Ç—Å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ"
    )
    await callback.message.answer(
        "‚û§ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –Ω–∏—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç. –ü—Ä–∏–º–µ—Ä: –°–µ–º–µ–π–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ –ø–∞—Ä–∫—É –≤–æ–∑–ª–µ –¥–æ–º–∞ —Å –ø–∏–∫–Ω–∏–∫–æ–º —Å –±–∞–±—É—à–∫–æ–π –∏ –¥–µ—Ç—å–º–∏ –ü–æ–ª–∏–Ω–æ–π 2 –≥–æ–¥–∞ –∏ –ú–∞–∫—Å–∏–º–æ–º 7 –ª–µ—Ç."
    )
    await state.update_data(photo_file_id=[])
    await state.set_state(ProcessImageStates.addImage)


@router.message(ProcessImageStates.addImage)
async def cmn_get_user_photo(message: Message, state: FSMContext):
    if message.content_type == "photo":
        data = await state.get_data()
        if len(data["photo_file_id"]) < 5:
            data["photo_file_id"].append(message.photo[-1].file_id)
        else:
            await message.answer("–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        await state.set_state(ProcessImageStates.addText)
    else:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        await state.set_state(ProcessImageStates.addImage)


@router.message(ProcessImageStates.addText)
async def cmn_get_user_text(message: Message, state: FSMContext):
    if message.content_type != "photo":
        await state.update_data(photo_description=message.text)
        await message.answer(
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é ü§©\n\n"
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 20 —Å–µ–∫—É–Ω–¥",
            reply_markup=kb_create_history(),
        )
    else:
        await message.answer(
            "–°–µ–π—á–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö"
        )
        await state.set_state(ProcessImageStates.addText)


@router.callback_query(F.data == "create_history")
async def cmn_create_history(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–¢—Ä—É–∂—É—Å—å –Ω–∞–¥ –∏—Å—Ç–æ—Ä–∏–µ–π, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ...")
    data = await state.get_data()

    photo_captions = prediction_captions(data["photo_file_id"])
    msg = instructions_history(photo_captions, data["photo_description"])
    history = prediction_history(msg).replace("\n\n", "\n")
    await state.update_data(history=history)
    await state.update_data(photo_captions=photo_captions)
    await callback.message.answer(f"{history}", reply_markup=kb_save_repeat_history())


@router.callback_query(F.data == "repeat_history")
async def cmn_repeat_history(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    add_new_history(
        callback.from_user.id,
        data["photo_captions"],
        data["photo_description"],
        data["history"],
        None,
        0,
    )
    await callback.message.answer(
        "–ñ–∞–ª—å, —á—Ç–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∏—Å—Ç–æ—Ä–∏—è ü•∫\n–°–¥–µ–ª–∞–µ–º –Ω–æ–≤—É—é?",
        reply_markup=kb_repeat_history(),
    )
