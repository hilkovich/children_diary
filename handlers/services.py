from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command

from utils.states import ProcessImageStates
from keyboards.users import kb_create_story, kb_save_story
from repository.services import gen_captions, gen_story, gen_message


router = Router()


@router.message(Command("new"))
async def comm_new_story(message: Message, state: FSMContext):
    await message.answer(
        "‚û§ –°–ø–µ—Ä–≤–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 20 –¥–µ—Ç—Å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ"
    )
    await message.answer(
        "‚û§ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –Ω–∏—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –ª–µ—Ç–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª –ö—Ä–∏—Å—Ç–∏–Ω—ã 7 –ª–µ—Ç."
    )
    await state.update_data(photos=[])
    await state.set_state(ProcessImageStates.addImage)


@router.callback_query(F.data == "new_story")
async def cmn_new_story(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚û§ –°–ø–µ—Ä–≤–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 20 –¥–µ—Ç—Å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ"
    )
    await callback.message.answer(
        "‚û§ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –Ω–∏—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –ª–µ—Ç–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª –ö—Ä–∏—Å—Ç–∏–Ω—ã 7 –ª–µ—Ç."
    )
    await state.update_data(photos=[])
    await state.set_state(ProcessImageStates.addImage)


@router.message(ProcessImageStates.addImage)
async def cmn_process_images(message: Message, state: FSMContext):
    if message.content_type == "photo":
        data = await state.get_data()
        if len(data["photos"]) < 20:
            data["photos"].append(message.photo[-1].file_id)
        else:
            await message.answer("–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        await state.set_state(ProcessImageStates.addText)
    else:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        await state.set_state(ProcessImageStates.addImage)


@router.message(ProcessImageStates.addText)
async def cmn_process_text(message: Message, state: FSMContext):
    if message.content_type == "text":
        await state.update_data(descript=message.text)
        await message.answer(
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é ü§©", reply_markup=kb_create_story()
        )
    else:
        await message.answer(
            "–°–µ–π—á–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö"
        )
        await state.set_state(ProcessImageStates.addText)


@router.callback_query(F.data == "create_story")
async def cmn_create_story(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–°–æ–∑–¥–∞—é –∏—Å—Ç–æ—Ä–∏—é...")
    data = await state.get_data()
    captions = gen_captions(data["photos"])
    msg = gen_message(captions, data["descript"])
    history = gen_story(msg)
    await state.update_data(history=history)
    await callback.message.answer(f"{history}", reply_markup=kb_save_story())


@router.callback_query(F.data == "save_story")
async def cmn_save_story(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üéâ")
